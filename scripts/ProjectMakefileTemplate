.DEFAULT_GOAL:=help
SHELL:=/bin/bash

<b>:=\033[1m
</b>:=\033[0m

# This Makefile handles some of the common tasks in your project

outputpath=outputs/
configpath=configs/
sampath=build/
currentdatetime:=$(shell date '+%Y-%m-%d_%H-%M%p')

name=""
ifeq ($(name),"")
	archivefolder=$(currentdatetime)
else
	archivefolder=$(name)
endif

using=""
ifeq ($(using),"")
	configtemp=scripts/yourprojectname_prepare_config_files.py
else
	configtemp=$(using)
endif

OSTYPE=$(shell uname -s)
ifeq ($(OSTYPE),Linux)
	ncores=$(shell grep -c ^processor /proc/cpuinfo)
endif 

ifeq ($(OSTYPE),Darwin)
    ncores=$(shell sysctl -n hw.ncpu)
endif

# Calculating the number of cores needed for running the job on Lisa
n_configs=$$(wc -l < configfilenames.pool)
n_nodes=$(shell echo $$(( $(n_configs)/16 + 1 )) )

# Number of cores to build SAM
n_cores=$(shell echo $$(( $(ncores) - 1)) )

.PHONY: help

help:  ## Display this help
	@echo " \nYou can control your project using this Makefile. There are several"
	@echo " commands are available for running your simulation locally or on a "
	@echo " cluster. It's also possible to run the simulation sequentially or in"
	@echo " parallel on your local machine."
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target> \033[0m\n"} /^[a-zA-Z_-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)
	@echo
	@echo "Example Usage:"
	@echo "    make parameters using=~/projects_config/2012_project.py"
	@echo "    make run-seq-local; make archive name=Feb_5.zip"

##@ [Paramters]

using: ## Path to a new parameter generator
	@echo "Path to a new Python script for generating parameters, example usuage: 'make parameters using=my_config_grid.py"

name: ## The name of the archive
	@echo "Indicates the name of the archive, example usage: 'make archive name=my_archive"


##@ --------------------------------------------------------------
##@ Build 

sam-build: ## Rebuild the binaries, run this if you've modified the code
	# TODO: Run the `cmake` first
	@cmake -DCMAKE_BUILD_TYPE=Release -HSAM/SAMpp -BSAM/SAMpp/build
	@cmake --build SAM/SAMpp/build --parallel $(n_cores) --clean-first
	@mv SAM/SAMpp/build/SAMrun .

parameters: clean ## Preparing config files for SAM
	@printf '$(<b>)> Make sure that you have set all the parameters correctly... $(</b>)\n'
	@printf '$(<b>)> Make sure that you have updated the "data" dictionary in "main()"... $(</b>)\n'

	@python3 $(configtemp)

##@ Post-processing

csv: ## Create a set of files `*_prepared.csv` by adding all keys/values to them. Use this when the database is too big
	@printf '$(<b>)> Preparing the extended dataset... $(</b>)\n'
	@python3 scripts/yourprojectname_to_csv.py $(from)

stack: ## Stack several CSV files into one CSV file
	@printf '$(<b>)> Stacking output files... $(</b>)\n'
	@csvstack outputs/*_$(from)_prepared.csv > outputs/$(from)_stacked.csv

database: ## Aggregate output files into a SQLite database
	@printf '$(<b>)> Creating a table from outputs/$(from) dataset... $(</b>)\n'
	@csvsql --db sqlite:///dbs/yourprojectname.sqlite --insert outputs/$(from)_stacked.csv

summary: ## Runinng the `post-processing.R` script on every file in output/ folder
	@printf '$(<b>)> Summarizing the dataset... $(</b>)\n'
	@Rscript scripts/yourprojectname_post_processing.R

##@ Run

run-seq-local: ## Running the simulation sequentially on the local machine
	@printf '$(<b>)> Running SAM on the local machine... $(</b>)\n'
	@./scripts/yourprojectname_local_seq_run.sh

run-par-local: ## Running the simulation in parallel on the local machine
	@./scripts/yourprojectname_local_par_run.sh

run-par-lisa: ## Running the simulation in parallel on the Lisa cluster
	@printf '$(<b>)> Preparing Lisa enviroment, and submitting an array job... $(</b>)\n'
	module load pre2019
	module load stopos
	stopos purge -p yourprojectname_pool
	stopos create -p yourprojectname_pool
	stopos add -p yourprojectname_pool configfilenames.pool
	chmod +x scripts/yourprojectname_lisa_par_run.sh
	@echo "Requesting $(n_nodes) nodes..."
	sbatch -a 1-$(n_nodes) scripts/yourprojectname_lisa_par_run.sh

##@ Packaging

archive: ## Archiving the entire project directory to ../yourprojectname_archive/archive/CUREENT_DATE_TIME or ../yourprojectname_analysis/archive/<name>
	@printf '$(<b>)> Copying everything to ../yourprojectname_archive/$(archivefolder)... $(</b>)\n'

	@mkdir -pv ../yourprojectname_archive/$(archivefolder)
	@cp -rv * ../yourprojectname_archive/$(archivefolder)

package:
	@echo "This will zip everything, and put it somewhere, and delete the project"

compress: ## Compress the outputs/*, logs/* and configs/*
	7z a sam.zip SAM/
	7z a outputs.zip outputs/
	7z a configs.zip configs/
	7z a logs.zip logs/

##@ Cleanup

clean: ## Remove most project specific files, configs, jobs, logs, etc.
	@printf '$(<b>)> Cleaning up configs/* logs/* jobs/*... $(</b>)\n'
	@rm -rf configs
	@rm -rf logs
	@rm -rf jobs

	@mkdir -p configs
	@mkdir -p logs
	@mkdir -p jobs

	@printf '$(<b>)> Removing parameters pool... $(</b>)\n'

	@rm -rf configfilenames.pool

veryclean: clean ## Remove all project files, including outputs 
	@printf '$(<b>)> Cleaning project specific files, outputs/*, dbs/*, ... $(</b>)\n'

	@rm -rf outputs
	@rm -rf dbs

	@mkdir -p outputs
	@mkdir -p dbs
	
	@rm -rf slurm-*.out