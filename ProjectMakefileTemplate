.DEFAULT_GOAL:=help
SHELL:=/bin/bash

<b>:=\033[1m
</b>:=\033[0m

# This Makefile handles some of the common tasks in your project

outputpath=outputs/
configpath=configs/
sampath=build/
currentdatetime:=$(shell date '+%Y-%m-%d_%H-%M%p')

name=""
ifeq ($(name),"")
	archivefolder=$(currentdatetime)
else
	archivefolder=$(name)
endif

# Calculating the number of cores needed for running the job on Lisa
n_configs=$$(wc -l < configfilenames.pool)
n_nodes=$(shell echo $$(( $(n_configs)/16 + 1 )) )

.PHONY: help

help:  ## Display this help
	@echo "You can control your project using this Makefile. There are several"
	@echo "commands are available for running your simulation locally or on a "
	@echo "cluster. It's also possible to run the simulation sequentially or in"
	@echo "parallel on your local machine."
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target> \033[0m\n"} /^[a-zA-Z_-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)


##@ Build

sam-build: ## Rebuild the binaries, run this if you've modified the code
	# TODO: Run the `cmake` first
	cmake --build SAM/SAMpp/build --parallel 10
	mv SAM/SAMpp/build/SAMrun .

parameters: clean ## Preparing config files for SAM
	@printf '$(<b>) > Make sure that you have set all the parameters correctly... $(</b>)\n'
	@printf '$(<b>) > Make sure that you have updated the "data" dictionary in "main()"... $(</b>)\n'

	python3 yourprojectname_prepare_config_files.py

database: ## Aggregate output files into a SQLite database
	python3 yourprojectname_to_sqlite.py $(from)

csv: ## Create a set of files `*_prepared.csv` by adding all keys/values to them. Use this when the database is too big
	python3 yourprojectname_to_csv.py $(from)

run-seq-local: ## Running the simulation sequentially on the local machine
	./yourprojectname_local_seq_run.sh

run-par-local: ## Running the simulation in parallel on the local machine
	./yourprojectname_local_par_run.sh

run-par-lisa: ## Running the simulation in parallel on the Lisa cluster
	module load pre2019
	module load stopos
	stopos purge -p yourprojectname_pool
	stopos create -p yourprojectname_pool
	stopos add -p yourprojectname_pool configfilenames.pool
	chmod +x yourprojectname_lisa_par_run.sh
	@echo "Requesting $(n_nodes) nodes..."
	sbatch -a 1-$(n_nodes) yourprojectname_lisa_par_run.sh

archive: ## Archiving the entire project directory to ../yourprojectname_archive/archive/CUREENT_DATE_TIME or ../yourprojectname_analysis/archive/<name>
	@printf '$(<b>) > Copying everything to ../yourprojectname_archive/$(archivefolder)... $(</b>)\n'

	@mkdir -pv ../yourprojectname_archive/$(archivefolder)
	@cp -rv * ../yourprojectname_archive/$(archivefolder)

package:
	@echo "This will zip everything, and put it somewhere, and delete the project"

compress: ## Compress the outputs/*, logs/* and configs/*
	zip -r sam.zip SAM/
	zip -r outputs.zip outputs/
	zip -r configs.zip configs/
	zip -r logs.zip logs/

clean: ## Remove most project specific files, configs, jobs, logs, etc.
	@printf '$(<b>) > Cleaning up configs/* logs/* jobs*... $(</b>)\n'
	@rm -vrf configs
	@rm -vrf logs
	@rm -vrf jobs

	@mkdir -pv configs
	@mkdir -pv logs
	@mkdir -pv jobs

	@printf '$(<b>) > Removing parameters pool... $(</b>)\n'

	@rm configfilenames.pool

veryclean: clean ## Remove all project files, including outputs 
	@printf '$(<b>) > Cleaning project specific files, outputs/*, dbs/*, ... $(</b>)\n'

	@rm -vrf outputs
	@rm -vrf dbs

	@mkdir -pv outputs
	@mkdir -pv dbs
	
	@rm slurm-*.out